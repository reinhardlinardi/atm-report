// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocktransaction

import (
	transaction "github.com/reinhardlinardi/atm-report/internal/transaction"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountDaily provides a mock function with no fields
func (_m *Repository) CountDaily() ([]transaction.DailyCount, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountDaily")
	}

	var r0 []transaction.DailyCount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transaction.DailyCount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transaction.DailyCount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.DailyCount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountDailyByType provides a mock function with no fields
func (_m *Repository) CountDailyByType() ([]transaction.DailyTypeCount, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CountDailyByType")
	}

	var r0 []transaction.DailyTypeCount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transaction.DailyTypeCount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transaction.DailyTypeCount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.DailyTypeCount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDailyMaxWithdraw provides a mock function with no fields
func (_m *Repository) GetDailyMaxWithdraw() ([]transaction.DailyMaxWithdraw, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDailyMaxWithdraw")
	}

	var r0 []transaction.DailyMaxWithdraw
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transaction.DailyMaxWithdraw, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transaction.DailyMaxWithdraw); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.DailyMaxWithdraw)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields: _a0
func (_m *Repository) Load(_a0 []transaction.Transaction) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func([]transaction.Transaction) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]transaction.Transaction) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]transaction.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
