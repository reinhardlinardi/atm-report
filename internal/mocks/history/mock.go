// Code generated by mockery v2.53.1. DO NOT EDIT.

package mockhistory

import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Append provides a mock function with given fields: atmId, date, seq
func (_m *Repository) Append(atmId string, date string, seq int) (int64, error) {
	ret := _m.Called(atmId, date, seq)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (int64, error)); ok {
		return rf(atmId, date, seq)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) int64); ok {
		r0 = rf(atmId, date, seq)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(atmId, date, seq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Check provides a mock function with given fields: atmId, date, seq
func (_m *Repository) Check(atmId string, date string, seq int) (bool, error) {
	ret := _m.Called(atmId, date, seq)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int) (bool, error)); ok {
		return rf(atmId, date, seq)
	}
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(atmId, date, seq)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(atmId, date, seq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
